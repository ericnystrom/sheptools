#!/usr/bin/perl
# 
# shep-extract-headnotes: Extract LexisNexis Headnotes from HTML-exported case text (from Lexis-Nexis).
#
# Usage: shep-extract-headnotes CASENAME FILE.HTML
#
# Where CASENAME is the word to tag these headnotes with, and
# FILE.HTML is the html-format exported case text.
#
# by Eric Nystrom, http://ericnystrom.org
#   started: May 14, 2016
#   version: August 28, 2017
#   license: MIT License

use strict;
use warnings;
use HTML::Strip;
use Text::Unidecode;

my $hs = HTML::Strip->new();

# Read in .html file from STDIN or file on command line, processes
# file one line at a time.

# Delimiter for output (I suggest pipe or TAB, many cases have commas)
my $delim = "\t";

# Set up other variables
my $head = 0;
my @hn;
my $hncount = 0;
my @internal;

# If I don't have two arguments, print a brief help message
die "Usage: shep-extract-headnotes CASENAME file.html\n" if @ARGV < 2;

# Grab case name from command line and shift, so file can be processed
my $case = shift;

# Process HTML export file
LINE: while (<>) {
    # Grab the line and remove HTML tags, strip Unicode weirdness
    chomp;
    my $raw_html = $_;
    my $clean_text = $hs->parse( $raw_html );
    $clean_text =~ s/([^[:ascii:]]+)/unidecode($1)/ge;

    # Process first few lines of file to get general information about
    # case?

    # Note: the headnotes are all in one huge <P>, so that ends up
    # just one line once cleaned.  So I use the cleaned lines to find
    # the one monster headnote line I want, then go back to the
    # original, split on <BR><BR>, and re-clean.
    
    if ( !$head && $clean_text =~ /^\s*LexisNexis\(R\) Headnotes/ ) {
	# Headnotes found after this, set $head
	$head = 1;
	next LINE;
    }

    # Once we hit the Summary or Decision or SYLLABUS section, we are
    # done processing the headnotes, so bomb out of the file reading
    # loop. Note, if you are getting duplicate headnotes in output,
    # the "stop sign", so to speak, was probably missed; check it out
    # and add to the list here if needed.
    last LINE if ( $head && $clean_text =~ /DECISION:/ );
    last LINE if ( $head && $clean_text =~ /SUMMARY:/ );
    last LINE if ( $head && $clean_text =~ /SYLLABUS/ );

    # Process our headnotes
    if ( $head && $clean_text !~ /^\s*$/ ) {
	my @temphn = split(m/<BR><BR>/, $_);

	# for every entry in the split-up batch of headnotes, remove
	# the HTML formatting, then see if I can extract the actual
	# headnote itself, and push that on to the array of saved
	# headnotes.
	foreach my $i (@temphn) {
	    my $k = $hs->parse( $i );
	    $k =~ s/.*(\[HN[0-9]{1,3}\].*)/$1/;
	    push (@hn, $k);
	}
    }
}

# Print results -- delimited by $delim (set at top of program), should
# probably use pipe or TAB, since note contents often have commas

foreach my $j (@hn) {
    # Extract the HN1 (etc) and rest of the headnote text from line as
    # $1 and $2, respectively, and print along with case name
    $j =~ m/\[(HN[0-9]{1,3})\]\s+(.*)/;

    # Print in TSV/CSV form: caseid, hn, text
    print "$case${delim}$1${delim}$2\n";

    # Print as statements, with identifier trailing in brackets, blank
    # line between entries
    #print "$2 [$case,$1]\n\n"
}

# Clean up
$hs->eof;

### EOF ###
